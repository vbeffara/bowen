import Mathlib

open TopologicalSpace Metric Set Classical Topology Function

variable {X : Type*} [PseudoMetricSpace X] [hX : IsUltrametricDist X]

def balls (X : Type*) [PseudoMetricSpace X] : Set (Set X) := {b | ‚àÉ x, ‚àÉ r > 0, b = ball x r}

lemma metric_space_topological_basis {X : Type*} [PseudoMetricSpace X] :
    IsTopologicalBasis (balls X) := by
  refine isTopologicalBasis_of_isOpen_of_nhds ?_ ?_
  . rintro s ‚ü®x, r, _, rfl‚ü©
    exact isOpen_ball
  . intros x u hx_in_u hu_open
    rw [isOpen_iff] at hu_open
    obtain ‚ü®r, r_pos, h_ball_sub‚ü© := hu_open x hx_in_u
    refine ‚ü®ball x r, ‚ü®x, r, r_pos, rfl‚ü©, mem_ball_self r_pos, h_ball_sub‚ü©

lemma open_eq_union_ball {X : Type*} [PseudoMetricSpace X] (O : Set X) (hO : IsOpen O) :
    ‚àÉ s : Set (balls X), O = ‚ãÉ‚ÇÄ s := by
  /- #check IsTopologicalBasis.open_eq_sUnion metric_space_topological_basis hO -/
  obtain ‚ü®s, s_sub_balls, o_eq_union_s‚ü© :=
    IsTopologicalBasis.open_eq_sUnion metric_space_topological_basis hO
  let s' : Set (balls X) := {‚ü®u.1, mem_of_mem_of_subset u.2 s_sub_balls‚ü© | u : s}
  use s'
  rw [o_eq_union_s]
  simp [sUnion_image, sUnion_eq_iUnion]
  ext x
  constructor
  all_goals intro x_mem
  . simp_all [s']
    obtain ‚ü®b, b_mem_s, x_mem_b‚ü© := x_mem
    use b
    exact ‚ü®b_mem_s, mem_of_mem_of_subset b_mem_s s_sub_balls, x_mem_b‚ü©
  . simp_all [s']
    obtain ‚ü®b, b_mem_s, b_mem_balls, x_mem_b‚ü© := x_mem
    exact ‚ü®b, b_mem_s, x_mem_b‚ü©

lemma open_eq_union_ball' {X : Type*} [PseudoMetricSpace X] (O : Set X) (hO : IsOpen O) :
    O = ‚ãÉ‚ÇÄ {b | b ‚àà balls X ‚àß b ‚äÜ O} := by
  ext x
  constructor
  ¬∑ intro hx
    have h1 := Metric.nhds_basis_ball (x := x)
    have h3 : O ‚àà ùìù x := hO.mem_nhds hx
    obtain ‚ü®r, hr1, hr2‚ü©:= h1.mem_iff.1 h3
    refine ‚ü®ball x r, ‚ü®‚ü®x, r, hr1, rfl‚ü©, hr2‚ü©, mem_ball_self hr1‚ü©
  ¬∑ rintro ‚ü®b, ‚ü®-, hb2‚ü©, hb3‚ü©
    exact hb2 hb3

def rel (U : Set (balls X)) (u v : U) : Prop := ‚àÉ w ‚àà U, u.1.1 ‚äÜ w ‚àß v.1.1 ‚äÜ w

-- Transitivite vient de la distance ultrametrique
lemma rel_equiv {U : Set (balls X)} : Equivalence (rel U) where
  refl s := ‚ü®s, by simp‚ü©
  symm {u v} := by
    rintro ‚ü®w, hw1, hw‚ü©
    exact ‚ü®w, hw1, hw.symm‚ü©
  trans {u v w} := by
    rintro ‚ü®s, sU, u_sub_s, v_sub_s‚ü© ‚ü®t, tU, v_sub_t, w_sub_t‚ü©
    have key : s.1 ‚äÜ t.1 ‚à® t.1 ‚äÜ s.1 ‚à® Disjoint s.1 t.1 := by
      obtain ‚ü®s, xs, rs, rs_pos, rfl, hsU‚ü© := s
      obtain ‚ü®t, xt, rt, rt_pos, rfl, htU‚ü© := t
      apply IsUltrametricDist.ball_subset_trichotomy
    rcases key with s_sub | t_sub | dis
    ¬∑ exact ‚ü®t, tU, u_sub_s.trans s_sub, w_sub_t‚ü©
    ¬∑ exact ‚ü®s, sU, u_sub_s, w_sub_t.trans t_sub‚ü©
    ¬∑ contrapose dis
      apply Nonempty.not_disjoint
      rcases v with ‚ü®‚ü®v, xv, rv, rv_pos, rfl‚ü©, hvU‚ü©
      have : xv ‚àà ball xv rv := mem_ball_self rv_pos
      exact ‚ü®xv, v_sub_s this, v_sub_t this‚ü©

instance quot_U (U : Set (balls X)) : Setoid U := ‚ü®rel U, rel_equiv‚ü©

lemma union_mem_balls {Œπ : Type*} [Nonempty Œπ] (C : Œπ ‚Üí X) (R : Œπ ‚Üí ‚Ñù) (hR : ‚àÄ i, 0 < R i)
    {x : X} (h1 : ‚àÄ i, x ‚àà ball (C i) (R i)) (h2 : BddAbove (range R)) :
    ‚ãÉ i, ball (C i) (R i) ‚àà balls X := by
  refine ‚ü®x, iSup R, ?_, ?_‚ü©
  ¬∑ let i‚ÇÄ : Œπ := Nonempty.some inferInstance
    have h1 := hR i‚ÇÄ
    have h2 := le_ciSup h2 i‚ÇÄ
    linarith
  ¬∑ have (i) : ball (C i) (R i) = ball x (R i) := IsUltrametricDist.ball_eq_of_mem (h1 i)
    ext z
    symm
    simpa [this] using lt_ciSup_iff h2

def equiv_class (U : Set (balls X)) (u : U) : Set U := {v : U | rel U u v}

-- FIX : r√©√©crire les hyp : IsUltrametricDist pas utilis√©
omit hX in
lemma union_class_eq (U : Set (balls X)) (u : U) :
    ‚ãÉ (v : equiv_class U u), v = ‚ãÉ v : {w : U // u.1.1 ‚äÜ w.1.1}, v.1.1.1 := by
  apply subset_antisymm
  all_goals rw [subset_def]
  all_goals intros w hw
  all_goals simp_all only [mem_iUnion, exists_prop, mem_setOf_eq]
  all_goals simp
  . obtain ‚ü®‚ü®v, ‚ü®s, s_mem_U, u_sub_s, v_sub_s‚ü©‚ü©, w_mem_v‚ü© := hw
    refine ‚ü®s, u_sub_s, ?_‚ü©
    simp
    exact ‚ü®s_mem_U, mem_of_mem_of_subset w_mem_v v_sub_s‚ü©
  . obtain ‚ü®‚ü®v, u_sub_v‚ü©, hv‚ü© := hw
    refine ‚ü®v, ?_, hv‚ü©
    simp [equiv_class, rel]
    use v
    simpa

lemma union_class_mem_balls (U : Set (balls X)) (u : U)
  (Ubdd : ‚àÉ (x: X), ‚àÉ r > 0, ‚ãÉ‚ÇÄ U ‚äÜ ball x r) : -- Hypoth√®se gratuite si l'ouvert est born√©
    ‚ãÉ (v : equiv_class U u), v ‚àà balls X := by
  have key (v : {w : U // u.1.1 ‚äÜ w.1.1}) := v.1.1.2.out
  choose C r r_pos v_ball using key

  obtain ‚ü®x, R, R_pos, U_union_sub_ball‚ü© := Ubdd
  let ra (w : {w : U // u.1.1 ‚äÜ w.1.1}) : ‚Ñù := if r w ‚â• R then R else r w
  have ra_pos (w : {w : U // u.1.1 ‚äÜ w.1.1}) : ra w > 0 := by
    by_cases h : r w ‚â• R
    all_goals simp [ra, h]
    . exact R_pos
    . exact r_pos w

  have U_ball_eq (w : {w : U // u.1.1 ‚äÜ w.1.1}) : ball x R = ball (C w) R := by
    refine IsUltrametricDist.ball_eq_of_mem ?_
    refine mem_of_mem_of_subset (mem_ball_self (r_pos w)) ?_
    refine subset_trans ?_ U_union_sub_ball
    rw [‚Üêv_ball w]
    simp only [sUnion_image]
    apply subset_iUnion_of_subset ‚ü®w.1.1, w.1.1.2‚ü©
    simp

  have ball_r_eq_ra (w : {w : U // u.1.1 ‚äÜ w.1.1}) : ball (C w) (r w) = ball (C w) (ra w) := by
    by_cases h : r w ‚â• R
    all_goals simp [ra, h]
    refine subset_antisymm ?_ (ball_subset_ball h)
    rw [‚ÜêU_ball_eq w]
    refine subset_trans ?_ U_union_sub_ball
    rw [‚Üê v_ball w]
    simp only [sUnion_image]
    apply subset_iUnion_of_subset ‚ü®w.1.1, w.1.1.2‚ü©
    simp

  have union_ball :
      ‚ãÉ v : {w : U // u.1.1 ‚äÜ w.1.1}, v = ‚ãÉ v : {w : U // u.1.1 ‚äÜ w.1.1}, ball (C v) (ra v) := by
    simp only [v_ball]; exact iUnion_congr ball_r_eq_ra
  rw [union_class_eq U u, union_ball]

  have h1 (w : {w : U // u.1.1 ‚äÜ w.1.1}) : (C ‚ü®u, subset_rfl‚ü©) ‚àà ball (C w) (ra w) := by
    rw [‚Üêball_r_eq_ra w, ‚Üêv_ball w]
    refine mem_of_mem_of_subset ?_ w.2
    set u' : {w : U // u.1.1 ‚äÜ w.1.1} := ‚ü®u, subset_rfl‚ü©
    rw [v_ball u']
    exact mem_ball_self (r_pos u')

  have sU_nonempty : Nonempty {w : U // u.1.1 ‚äÜ w.1.1} := ‚ü®u, by simp‚ü©
  refine union_mem_balls C ra ra_pos h1 ?_
  rw [bddAbove_def]
  use R
  intro rw hrw
  simp only [range, mem_setOf_eq] at hrw
  obtain ‚ü®w, rw_eq‚ü© := hrw
  rw [‚Üê rw_eq]
  simp [ra]
  by_cases h : R ‚â§ r w
  all_goals simp [h]
  push_neg at h
  exact le_of_lt h

def repr_set (U : Set (balls X)) : Set U :=
  {b | ‚àÉ rb : Quotient (quot_U U), rb.out = b}

example (U : Set (balls X)) : repr_set U = Set.range (Quotient.out : Quotient (quot_U U) ‚Üí _) := by
  ext u; simp [repr_set]

def max_ball (U : Set (balls X)) (u : U) (Ubdd : ‚àÉ (x: X), ‚àÉ r > 0, ‚ãÉ‚ÇÄ U ‚äÜ ball x r) : balls X :=
  ‚ü®‚ãÉ (v : equiv_class U u), v, union_class_mem_balls U u Ubdd‚ü©

def toto (U : Set (balls X)) (Ubdd : ‚àÉ (x: X), ‚àÉ r > 0, ‚ãÉ‚ÇÄ U ‚äÜ ball x r) :
    Quotient (quot_U U) ‚Üí balls X := by
  let f (u : U) : balls X := max_ball U u Ubdd
  apply Quotient.lift f
  rintro a b hab
  simp [f, max_ball, equiv_class]
  convert rfl using 3
  ¬∑ ext u
    constructor <;> intro h
    ¬∑ exact rel_equiv.trans hab h
    ¬∑ exact rel_equiv.trans (rel_equiv.symm hab) h
  ¬∑ sorry

/- lemma dis (U : Set (balls X)) (u v : U) (Ubdd : ‚àÉ (x : X), ‚àÉ r > 0, ‚ãÉ‚ÇÄ U ‚äÜ ball x r) -/
/-   (h : max_ball U u Ubdd \) -/

lemma partition_union (U : Set (balls X)) (Ubdd : ‚àÉ (x : X), ‚àÉ r > 0, ‚ãÉ‚ÇÄ U ‚äÜ ball x r) :
    ‚ãÉ u ‚àà U, u = ‚ãÉ (u ‚àà repr_set U), (max_ball U u Ubdd).1 := by
  ext x
  constructor
  all_goals intro x_mem
  all_goals simp_all
  . obtain ‚ü®u, ‚ü®u_balls, u_mem_U‚ü©, x_mem_u‚ü© := x_mem
    let u : U := ‚ü®‚ü®u, u_balls‚ü©, u_mem_U‚ü©
    let ur : U := @Quotient.out U (quot_U U) ‚ü¶u‚üß -- quot_U ne peut pas √™tre devin√©
    have ur_is_repr : ur ‚àà repr_set U := by simp [repr_set]

    refine ‚ü®ur, ur.1.2, ?_‚ü©
    simp [max_ball]
    split_ands
    . exact ur_is_repr
    . refine ‚ü®u, ?hu, x_mem_u‚ü©
      refine ‚ü®u.1.2, u.2, ?_‚ü©
      simp [equiv_class, ur]
      exact Quotient.mk_out u
  . obtain ‚ü®u, u_balls, ‚ü®u_in_U, u_repr, x_mem_max_ball‚ü©‚ü© := x_mem
    simp [max_ball] at x_mem_max_ball
    obtain ‚ü®w, ‚ü®w_balls, ‚ü®w_mem_u, w_mem_equiv_u‚ü©‚ü©, x_mem_w‚ü© := x_mem_max_ball
    exact ‚ü®w, ‚ü®w_balls, w_mem_u‚ü©, x_mem_w‚ü©

example (O : Set X) (hO : IsOpen O) (O_bdd : ‚àÉ (x : X), ‚àÉ r > 0, O ‚äÜ ball x r) :
    ‚àÉ Œπ : Type*, ‚àÉ Œ¶ : Œπ ‚Üí balls X, (O = ‚ãÉ s, Œ¶ s) ‚àß Pairwise (onFun Disjoint (fun s => (Œ¶ s).1)) := by
  obtain ‚ü®xo, ro, ro_pos, o_sub_ball‚ü© := O_bdd
  obtain ‚ü®U, o_eq_U_union‚ü© := open_eq_union_ball O hO
  have Ubdd : ‚àÉ (x : X), ‚àÉ r > 0, ‚ãÉ‚ÇÄ U ‚äÜ ball x r := by
    refine ‚ü®xo, ro, ro_pos, ?_‚ü©
    rw [‚Üê o_eq_U_union]
    exact o_sub_ball

  refine ‚ü®?_, toto U Ubdd, ?_‚ü©
  have := toto U Ubdd
  sorry
  -- Add proof here

theorem open_eq_disjoint_union_ball
  (O : Set X) (hO : IsOpen O) (O_bdd : ‚àÉ (x : X), ‚àÉ r > 0, O ‚äÜ ball x r) :
    ‚àÉ s ‚äÜ balls X, O = ‚ãÉ‚ÇÄ s ‚àß s.PairwiseDisjoint id := by
  obtain ‚ü®xo, ro, ro_pos, o_sub_ball‚ü© := O_bdd
  obtain ‚ü®U, o_eq_U_union‚ü© := open_eq_union_ball O hO

  have Ubdd : ‚àÉ (x : X), ‚àÉ r > 0, ‚ãÉ‚ÇÄ U ‚äÜ ball x r := by
    refine ‚ü®xo, ro, ro_pos, ?_‚ü©
    rw [‚Üê o_eq_U_union]
    exact o_sub_ball

  let max_balls : Set (balls X) := {max_ball U u Ubdd | u ‚àà repr_set U}

  have max_balls_sub_balls : ‚Üëmax_balls ‚äÜ balls X := by simp
  have o_eq_union_max_balls : O = ‚ãÉ‚ÇÄ max_balls := by
    rw [o_eq_U_union]
    simp only [sUnion_image]
    rw [partition_union U Ubdd]
    simp only [max_balls, mem_setOf_eq, iUnion_exists]
    sorry

  refine ‚ü®max_balls, max_balls_sub_balls, o_eq_union_max_balls, ?disjoint‚ü©

  sorry
